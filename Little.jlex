import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
 // fields
    int linenum;
    int charnum;
 // constructor
    TokenVal(int l, int c) {
        linenum = l;
	charnum = c;
    }
}

class IntLitTokenVal extends TokenVal {
 // new field: the value of the integer literal
    int intVal;
 // constructor
    IntLitTokenVal(int l, int c, int val) {
        super(l,c);
	intVal = val;
    }
}

class DblLitTokenVal extends TokenVal {
 // new field: the value of the double literal
    double dblVal;
 // constructor
    DblLitTokenVal(int l, int c, double val) {
        super(l,c);
	dblVal = val;
    }
}

class IdTokenVal extends TokenVal {
 // new field: the value of the identifier
    String idVal;
 // constructor
    IdTokenVal(int l, int c, String val) {
        super(l,c);
	idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
 // new field: the value of the string literal
    String strVal;
 // constructor
    StrLitTokenVal(int l, int c, String val) {
        super(l,c);
	strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num = 1;

    static void inc(int n) {
        num += n;
    }

    static void inc(String s) {
        inc(s.length());
    }
}

%%

WHITESPACE=[\t\ ]+
IDENTIFIER=[a-zA-Z_][a-zA-Z_0-9]*
INTEGER_LITERAL=[0-9]+
DOUBLE_LITERAL=([0-9]+\.[0-9]+|[0-9]+\.|\.[0-9]+)
STRING_LITERAL=\"(\\[nt'\"\\]|[^\"\n\\])*\"
COMMENT=/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/

// The next 3 lines are included so that we can use the generated scanner
// with java CUP (the Java parser generator)
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

// Tell JLex what to do on end-of-file
%eofval{
return new Symbol(sym.EOF);
%eofval}

// Turn on line counting
%line

%%

\n {
    CharNum.num = 1;
}

"int" {
    Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"void" {
    Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"double" {
    Symbol S = new Symbol(sym.DBL, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"if" {
    Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"else" {
    Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"while" {
    Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"return" {
    Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"scanf" {
    Symbol S = new Symbol(sym.SCANF, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"printf" {
    Symbol S = new Symbol(sym.PRINTF, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

{IDENTIFIER} {
    Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num,
                yytext()));
    CharNum.inc(yytext());
    return S;
}

"\"%d\"" {
    Symbol S = new Symbol(sym.INT_FORMAT, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"\"%f\"" {
    Symbol S = new Symbol(sym.DBL_FORMAT, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

{INTEGER_LITERAL} {
    int val;
    try {
        val = (new Integer(yytext())).intValue();
    } catch (NumberFormatException e) {
    Errors.warn(yyline+1, CharNum.num,
    	    "integer literal too large; using max value");
        val = Integer.MAX_VALUE;
    }

    Symbol S = new Symbol(sym.INTLITERAL,
            new IntLitTokenVal(yyline+1, CharNum.num, val));
    CharNum.inc(yytext());
    return S;
}

{DOUBLE_LITERAL} {
    double val = (new Double(yytext())).doubleValue();
    Symbol S = new Symbol(sym.DBLLITERAL, new DblLitTokenVal(yyline+1, CharNum.num,
                val));
        CharNum.inc(yytext());
        return S;
}

{STRING_LITERAL} {
    Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1,
                CharNum.num, yytext()));
    CharNum.inc(yytext());
    return S;
}


"+"	{
    Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"++" {
    Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"/" {
    Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}


"==" {
    Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

">" {Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"(" {
    Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}


"<" {
    Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"-"	{
    Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"*" {
    Symbol S = new Symbol(sym.STAR, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

")" {
    Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"!" {
    Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

";" {
    Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"&&" {
    Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"||" {
    Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}


"," {
    Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"<=" {
    Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"=" {
    Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}


"&" {
    Symbol S = new Symbol(sym.AMPERSAND, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"--" {
    Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}


"{" {
    Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"}" {
    Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"!=" {
    Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}



">=" {
    Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

"!=" {
    Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.inc(yytext());
    return S;
}

{COMMENT} {
    CharNum.inc(yytext());
}

{WHITESPACE} {
    CharNum.inc(yytext());
}

. {
    Errors.fatal(yyline+1, CharNum.num,
            "ignoring illegal character: " + yytext());
    CharNum.inc(yytext());
}
